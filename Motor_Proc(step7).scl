FUNCTION_BLOCK "Motor_Proc"
TITLE='电机控制'
KNOW_HOW_PROTECT
AUTHOR:Goosy
NAME:MotorPrc
FAMILY:GooLib
VERSION:'1.0'

CONST
  UNKNOWN := 0;
  STOPED := 1;
  STARTING := 2;
  RUNNING := 4;
  STOPPING := 8;
  START_FAILURE := 16;
  STOP_FAILURE := 32;
END_CONST

VAR_INPUT
  remote {S7_m_c := 'true'} : BOOL := TRUE;    // 远程模式，紧停不受此限制
  enable_run {S7_m_c := 'true'} : BOOL := TRUE;// 允许启动 （比如已蓄能、高压到位等）
  run {S7_m_c := 'true'} : BOOL;               // 运行状态输入
  stateless {S7_m_c := 'true'} : BOOL;         // 指示该电机没有运行状态返回电路，不再根据run信号判断启停
  error {S7_m_c := 'true'} : BOOL;             // 指示电机错误
  over_time {S7_m_c := 'true'} : DINT := 5000; // 线圈输出超时时间(毫秒)
  delaytime AT over_time : TIME;               // 同上，TIME类型
END_VAR

VAR_IN_OUT
  start_CMD {S7_m_c := 'true'} : BOOL;         // 启电机命令
  stop_CMD {S7_m_c := 'true'} : BOOL;          // 停电机命令
  E_stop_CMD {S7_m_c := 'true'} : BOOL;        // 紧急停电机命令，对应输出电路为E_stop_coil。该电路应不受远程切换开关的限制
END_VAR

VAR_OUTPUT
  run_coil {S7_m_c := 'true'} : BOOL;          // 运行输出，没有stop_CMD命令不会撤回信号。用在无启动自保持电机中
  start_coil {S7_m_c := 'true'} : BOOL;        // 启动输出，用在有启动自保持电机中。电机启动后或超时后撤回信号
  stop_coil {S7_m_c := 'true'} : BOOL;         // 停输出，电机停止后或超时后撤回信号
  E_stop_coil {S7_m_c := 'true'} : BOOL;       // 急停输出
  state {S7_m_c := 'true'} : INT;              // 状态输出
END_VAR

VAR
  run_signal : BOOL;                           // 运行信号
  stop_signal : BOOL;                          // 停止信号
  emergency : BOOL;                            // 紧急停止指示
  _state : INT;                                // 状态 见const
  delayon : TON;
END_VAR

BEGIN

// 外部输入：remote enable_run stateless error start_CMD stop_CMD E_stop_CMD
// 状态输出：run_coil start_coil stop_coil E_stop_coil state
// 内部状态: run_signal stop_signal emergency
IF stateless THEN
  run_signal := FALSE;
  stop_signal := FALSE;
ELSE
  run_signal := run;
  stop_signal := NOT run;
END_IF;

// 禁止启动
IF NOT enable_run OR NOT remote OR error THEN
  start_CMD := FALSE;
  IF _state = STARTING OR _state = START_FAILURE THEN
    // 分别退回到 STOPED 或 UNKNOWN 状态
    IF stateless THEN
      _state := UNKNOWN;
    ELSE
      _state := STOPED;
    END_IF;
  END_IF;
END_IF;

// 禁止正常停止
IF NOT remote OR error THEN
  stop_CMD := FALSE;
  IF _state = STOPPING OR _state = STOP_FAILURE THEN
    // 分别退回到 RUNNING 或 UNKNOWN 状态
    IF stateless THEN
      _state := UNKNOWN;
    ELSE
      _state := RUNNING;
    END_IF;
  END_IF;
END_IF;

// 状态输入信号
IF run_signal THEN // 运行信号 隐含 NOT stateless
  start_CMD := FALSE;
  // 只能是 STOPPING STOP_FAILURE RUNNING 三种状态之一
  IF _state <> STOPPING OR _state <> STOP_FAILURE THEN
    _state := RUNNING;
  END_IF;
ELSIF stop_signal THEN // 停止信号 隐含 NOT stateless
  stop_CMD := FALSE;
  E_stop_CMD := FALSE;
  // 只能是 STARTING START_FAILURE STOPED 三种状态之一
  IF _state <> STARTING OR _state <> START_FAILURE THEN
    _state := STOPED;
  END_IF;
ELSE // 无状态信号
  // 只能是 STARTING STOPPING UNKNOWN 三种状态之一
  IF _state <> STARTING OR _state <> STOPPING THEN
    _state := UNKNOWN;
  END_IF;
END_IF;

// 急停优先
IF E_stop_CMD THEN
  start_CMD := FALSE;
  stop_CMD := FALSE;
  _state := STOPPING;
  emergency := TRUE;
END_IF;

// 停命令
IF stop_CMD THEN
  start_CMD := FALSE;
  _state := STOPPING;
  emergency := FALSE;
END_IF;

// 启命令
IF start_CMD THEN
  // stop_CMD := FALSE; 上方逻辑顺序下无必要
  _state := STARTING;
END_IF;

// 输出超时撤回
delayon(
  IN := (_state = STARTING) OR (_state = STOPPING),
  PT := delaytime);
IF delayon.Q THEN
  IF _state = STARTING THEN
    // STARTING 超时后状态只能是 UNKNOWN START_FAILURE 二者之一
    start_CMD := FALSE;
    IF stateless THEN
      _state := UNKNOWN;
    ELSE
      _state := START_FAILURE;
    END_IF;
  ELSIF _state = STOPPING THEN
    // STOPPING 超时后状态只能是 UNKNOWN STOP_FAILURE 二者之一
    stop_CMD := FALSE;
    E_stop_CMD := FALSE;
    IF stateless THEN
      _state := UNKNOWN;
    ELSE
      _state := STOP_FAILURE;
    END_IF;
  END_IF;
END_IF;

// 状态约束
IF _state = UNKNOWN THEN
  // run_coil 保持原值
  start_coil := FALSE;
  stop_coil := FALSE;
  E_stop_coil := FALSE;
ELSIF _state = STOPED THEN
  run_coil := FALSE;
  start_coil := FALSE;
  stop_coil := FALSE;
  E_stop_coil := FALSE;
ELSIF _state = STARTING THEN
  run_coil := TRUE;
  start_coil := TRUE;
  stop_coil := FALSE;
  E_stop_coil := FALSE;
ELSIF _state = RUNNING THEN
  run_coil := TRUE;
  start_coil := FALSE;
  stop_coil := FALSE;
  E_stop_coil := FALSE;
ELSIF _state = STOPPING THEN
  run_coil := FALSE;
  start_coil := FALSE;
  stop_coil := NOT emergency;
  E_stop_coil := emergency;
ELSIF (_state = START_FAILURE) OR (_state = STOP_FAILURE) THEN
  run_coil := FALSE;
  start_coil := FALSE;
  stop_coil := FALSE;
  E_stop_coil := FALSE;
END_IF;

END_FUNCTION_BLOCK
